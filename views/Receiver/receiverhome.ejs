<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MealMap Receiver Panel</title>
    <link rel="stylesheet" href="styles/Receiver/receiverhome.css">
    <link rel="icon" type="image/png" href="assets/logo.jpg" />
    <script async defer
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAjhqGCsIfqZlzl0XN8QldoaELfFoCtcYY&callback=initMap">
     </script>

</head>
<body>
    <div class="container">
        <header>
            <div class="nav">
                <img src="assets/logo.jpg" alt="Logo Icon" width="50" height="50">
                <h1>MealMap Receiver Panel</h1>
            </div>
            
            <button id="locate-btn" >
                üìç My Location
              </button>
        </header>
        
        <div class="main-content">
            <div class="filters">
                <h2>Filters</h2>
                <div class="filter-group">
                    <label for="distance">Distance (km):</label>
                    <input type="range" id="distance" min="1" max="50" value="10">
                    <span id="distance-value">10 km</span>
                </div>
                
                <div class="filter-group">
                    <label for="food-type">Food Type:</label>
                    <select id="food-type">
                        <option value="all">All</option>
                        <option value="vegetables">Vegetables</option>
                        <option value="fruits">Fruits</option>
                        <option value="grains">Grains</option>
                        <option value="protein">Protein</option>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="freshness">Freshness:</label>
                    <select id="freshness">
                        <option value="all">All</option>
                        <option value="fresh">Fresh (&lt; 1 day)</option>
                        <option value="good">Good (1-3 days)</option>
                        <option value="acceptable">Acceptable (3-5 days)</option>
                    </select>
                </div>
            </div>

            <div id="map" style="height: 500px; width: 100%;"></div>


            <div class="food-listings">
                <h2>Available Food Donations</h2>
                <div id="listings-container"></div>
            </div>
        </div>
    </div>
    <h2>Food Receiver Feedback</h2>


<form id="feedbackForm">
  <label for="name">Your Name (optional):</label><br>
  <input type="text" id="name" name="name" placeholder="Enter your name"><br><br>

  <label for="date">Date of Pickup:</label><br>
  <input type="date" id="date" name="date" required><br><br>

  <label for="rating">How would you rate the food quality?</label><br>
  <select id="rating" name="rating" required>
    <option value="">--Select--</option>
    <option value="5">Excellent</option>
    <option value="4">Good</option>
    <option value="3">Average</option>
    <option value="2">Poor</option>
    <option value="1">Very Poor</option>
  </select><br><br>

  <label for="comments">Additional Comments:</label><br>
  <textarea id="comments" name="comments" rows="4" cols="50" placeholder="Write your feedback here..."></textarea><br><br>

  <button type="submit">Submit Feedback</button>
</form>

<p id="thankYouMessage" style="color: green; display: none;">Thank you for your feedback!</p>

<script>
document.getElementById("feedbackForm").addEventListener("submit", function(event) {
  event.preventDefault(); // Prevent actual form submission
  // Show thank you message
  document.getElementById("thankYouMessage").style.display = "block";
  alert("Thank you for your feedback!")

  // Optionally reset the form
  document.getElementById("feedbackForm").reset();
});
</script>



    <script>
        const foodDonations = <%- JSON.stringify(foodList) %>;
    
        let map;
        const markers = [];
        const infoWindows = [];
        let userLocationMarker = null;
        let userLatLng = null; // To store current user location
    
        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 13,
                center: { lat: foodDonations[0]?.location.lat || 13.621, lng: foodDonations[0]?.location.lng || 79.291 },
            });
    
            foodDonations.forEach((donation, index) => {
                const marker = new google.maps.Marker({
                    position: donation.location,
                    map: map,
                    title: donation.name,
                });
    
                const infoWindow = new google.maps.InfoWindow({
                    content: `
                        <div>
                            <strong>${donation.name}</strong><br/>
                            Quantity: ${donation.quantity}<br/>
                            Freshness: ${donation.freshness}<br/>
                            <span class="distance-placeholder-${donation.id}">Distance: calculating...</span>
                        </div>
                    `
                });
    
                marker.addListener("click", () => {
                    closeAllInfoWindows();
                    infoWindow.open(map, marker);
                });
    
                markers.push(marker);
                infoWindows.push(infoWindow);
            });
    
            updateListings();
    
            document.getElementById("locate-btn").addEventListener("click", showMyLocation);
        }
    
        function closeAllInfoWindows() {
            infoWindows.forEach(iw => iw.close());
        }
    
        function filterDonations() {
            const distanceFilter = parseInt(document.getElementById('distance').value);
            const foodTypeFilter = document.getElementById('food-type').value;
            const freshnessFilter = document.getElementById('freshness').value;
    
            return foodDonations.filter(donation => {
                return (
                    (userLatLng ? donation.distance <= distanceFilter : true) &&
                    (foodTypeFilter === 'all' || donation.type === foodTypeFilter) &&
                    (freshnessFilter === 'all' || donation.freshness === freshnessFilter)
                );
            });
        }
    
        function updateListings() {
            const filtered = filterDonations();
            const container = document.getElementById('listings-container');
            container.innerHTML = '';
    
            filtered.forEach(donation => {
                const distanceText = userLatLng && donation.distance != null
                    ? `${donation.distance.toFixed(2)} km`
                    : 'Location not available';
    
                const item = document.createElement('div');
                item.className = 'food-item';
                item.innerHTML = `
                    <div class="food-item-info">
                        <h3>${donation.name}</h3>
                        <p>Quantity: ${donation.quantity}</p>
                        <p>Distance: ${distanceText}</p>
                        <p class="status-${donation.freshness}">Status: ${donation.freshness}</p>
                    </div>
                    <div class="food-item-actions">
                        <button onclick="requestPickup('${donation.id}')">Request Pickup</button>
                        <button onclick="focusOnMarker('${donation.id}')">Focus on Map</button>
                    </div>
                `;
                container.appendChild(item);
            });
        }
    
        function requestPickup(donationId) {
    const donation = foodDonations.find(d => d.id === donationId);
    if (!donation) return alert("Donation not found.");

    if (!userLatLng) {
        alert("Please allow location access by clicking the 'üìç My Location' button first.");
        return;
    }

    const origin = `${userLatLng.lat},${userLatLng.lng}`;
    const destination = `${donation.location.lat},${donation.location.lng}`;

    const directionsUrl = `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${destination}&travelmode=driving`;

    // Open Google Maps in a new tab
    window.open(directionsUrl, '_blank');
    }

    
        function focusOnMarker(donationId) {
            const index = foodDonations.findIndex(d => d.id === donationId);
            if (index !== -1 && markers[index]) {
                map.panTo(markers[index].getPosition());
                map.setZoom(15);
                closeAllInfoWindows();
                infoWindows[index].open(map, markers[index]);
            }
        }
    
        function showMyLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    userLatLng = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
    
                    map.panTo(userLatLng);
                    map.setZoom(15);
    
                    if (userLocationMarker) {
                        userLocationMarker.setMap(null);
                    }
    
                    userLocationMarker = new google.maps.Marker({
                        position: userLatLng,
                        map: map,
                        title: "You are here!",
                        icon: {
                            url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                        }
                    });
    
                    // Calculate distances
                    foodDonations.forEach(donation => {
                        donation.distance = calculateDistance(userLatLng, donation.location);
                    });
    
                    updateListings();
    
                }, () => {
                    alert("Could not access your location.");
                });
            } else {
                alert("Geolocation is not supported by your browser.");
            }
        }
    
        // Haversine formula for distance in KM
        function calculateDistance(loc1, loc2) {
            const R = 6371; // Earth's radius in km
            const dLat = toRad(loc2.lat - loc1.lat);
            const dLon = toRad(loc2.lng - loc1.lng);
            const lat1 = toRad(loc1.lat);
            const lat2 = toRad(loc2.lat);
    
            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                      Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }
    
        function toRad(deg) {
            return deg * Math.PI / 180;
        }
    
        document.getElementById('distance').addEventListener('input', (e) => {
            document.getElementById('distance-value').textContent = `${e.target.value} km`;
            updateListings();
        });
    
        document.getElementById('food-type').addEventListener('change', updateListings);
        document.getElementById('freshness').addEventListener('change', updateListings);
    </script>
    
    
    
</body>
</html>